
pipeline {
    agent any
    environment{
        NETLIFY_SITE_ID = "14dacd09-ef50-4f01-ab30-a0a7ab02e887"  // id of existing static site we want to deploy over in netlify
        NETLIFY_AUTH_TOKEN = credentials('netlify-token')         // use credential_id as argument
    }

    stages {       
        stage("Build") {
            agent {
                docker { 
                    image 'node:18-alpine'
                    reuseNode true          // share workspace across agents
                    }
            }
            steps {
                sh """
                    echo "Running Build Stage"
                    ls -la
                    node --version
                    npm --version
                    npm ci         # install dependencies in package.json (ci version)
                    npm run build
                    ls -la build
                """
            }
        }

        stage("Tests"){
            parallel{                   // everything in this block is to be run in parallel
                stage("Unit Test") {
                    agent {
                        docker { 
                            image 'node:18-alpine'
                            reuseNode true          // share workspace across agents
                            }
                    }
                    steps {
                        sh """
                            echo "Running Basic Test Stage"
                            ls -la
                            test -f build/index.html
                            npm test
                        """
                    }
                    post {
                        always{
                            junit "jest-results/junit.xml" // publish the junit test report - using output of junit test stanza
                        }
                    }
                }

                stage("E2E Test") {
                    agent {
                        docker { 
                            image 'mcr.microsoft.com/playwright:v1.39.0-jammy'
                            reuseNode true          // share workspace across agents
                            }
                    }
                    steps { // local end to end test of app during build
                        sh """
                            echo "Running E2E Testing Stage"
                            npm install serve                    # Install serve locally into: node_modules/.bin/serve
                            node_modules/.bin/serve -s build &   # spin up webserver in background (TCP/3000) using the contents of the build directory
                            sleep 10                             # wait for webserver to come up
                            npx playwright test --reporter=html  # this starts the playwright tests 
                        """
                    }
                    post {
                        always{ // publish to an html report
                            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright Local', reportTitles: '', useWrapperFileDirectly: true])
                        }
                    }
                }
            }
        }

        stage("Deploy Staging") {
            agent {
                docker { 
                    image 'node:18-alpine'
                    reuseNode true          // share workspace across agents
                    }
            }
            steps {
                sh """
                    echo "Deploying to Staging"
                    npm install netlify-cli
                    npm install node-jq     # install node-jq for parsing json files
                    # next get status (shows credentials are working)
                    node_modules/.bin/netlify status
                    # next deploy from our dir called build with all the compiled bits into production
                    node_modules/.bin/netlify deploy --dir=build --json > deploy-output.json  # dump to json file
                    # extract value for the deploy_url key from the deploy-output.json file
                    node_modules/.bin/node-jq -r '.deploy_url' deploy-output.json
                """
            }
        }

        stage("Deploy Production") {
            agent {
                docker { 
                    image 'node:18-alpine'
                    reuseNode true          // share workspace across agents
                    }
            }
            steps {
                sh """
                    echo "Running Deploying to Production"
                    npm install netlify-cli
                    # next get status (shows credentials are working)
                    node_modules/.bin/netlify status
                    # next deploy from our dir called build with all the compiled bits into production
                    node_modules/.bin/netlify deploy --dir=build --prod 
                """
            }
        }

        stage("Prod E2E Test") {
            agent {       // Here we actually test the final deploued website
                docker { 
                    image 'mcr.microsoft.com/playwright:v1.39.0-jammy'
                    reuseNode true          // share workspace across agents
                    }
            }

            environment{
                // Playwright testing configuration:
                // The configuration for the playwright testing package is in: playwright.config.js
                // The url to test is in the environment variable: CI_ENVIRONMENT_URL (if not set it defaults to: localhost:3000)
                CI_ENVIRONMENT_URL = "https://elaborate-hummingbird-40303c.netlify.app"
            }

            steps { //  end to end test of deployed app
                sh """
                    echo "Running E2E Test against the prod deploy"
                    npx playwright test --reporter=html        # this starts the playwright tests 
                """
            }
            post {
                always{ // publish to an html report
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright E2E', reportTitles: '', useWrapperFileDirectly: true])
                }
            }
        }
    }
}

